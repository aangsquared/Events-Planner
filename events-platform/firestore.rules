rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isStaff() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'staff' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Events collection rules
    match /events/{eventId} {
      allow read: if true;  // Anyone can read events
      allow create: if isStaff();  // Only staff can create events
      allow update, delete: if isStaff() && 
        resource.data.createdBy == request.auth.uid;  // Only creator can update/delete
    }

    // Registrations collection rules
    match /registrations/{registrationId} {
      // Allow read if authenticated
      allow read: if isAuthenticated();
      
      // Allow create if authenticated and setting their own userId
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      // Allow update/delete if authenticated and the document belongs to them
      allow update, delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated() && 
        (userId == request.auth.uid || isAdmin());
      allow write: if isAuthenticated() && 
        (userId == request.auth.uid || isAdmin());
    }

    // OAuth accounts collection rules
    match /accounts/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
} 